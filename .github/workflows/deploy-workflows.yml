for i in $(seq 0 $((workflow_count - 1))); do
              # Extract and clean the workflow - be more conservative with fields
              clean_workflow=$(cat workflows.ndjson | jq ".[$i] | {
                namename: Deploy n8n Workflows
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  import:
    runs-on: ubuntu-latest
    env:
      N8N_API_URL: https://e49b-85-53-80-220.ngrok-free.app
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install n8n CLI v1.84.3
        run: npm install -g n8n@1.84.3
      - name: Health-check n8n API
        run: |
          status=$(curl -s \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            -o /dev/null -w "%{http_code}" \
            "$N8N_API_URL/api/v1/workflows")
          if [ "$status" -ne 200 ]; then
            echo "‚ùå n8n API unhealthy (HTTP $status)" >&2
            exit 1
          fi
          echo "‚úÖ n8n API healthy (HTTP $status)"
      - name: Debug workflows.ndjson file
        run: |
          echo "üîç Debugging workflows.ndjson file structure:"
          
          # Show file info
          echo "File size: $(wc -c < workflows.ndjson) bytes"
          echo "Lines: $(wc -l < workflows.ndjson)"
          
          # Show first 200 characters of the file
          echo ""
          echo "First 200 characters:"
          head -c 200 workflows.ndjson
          echo ""
          echo ""
          
          # Check if it's a single JSON array or NDJSON format
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üîç File starts with '[' - appears to be a JSON array"
            echo "First workflow keys:"
            cat workflows.ndjson | jq '.[0] | keys' 2>/dev/null || echo "Failed to parse as array"
            echo ""
            echo "Sample workflow structure (first 500 chars):"
            cat workflows.ndjson | jq '.[0]' | head -c 500
            echo "..."
          else
            echo "üîç File doesn't start with '[' - checking NDJSON format"
            echo "First line structure:"
            head -n 1 workflows.ndjson | jq 'keys' 2>/dev/null || echo "Failed to parse first line as JSON object"
          fi
      
      - name: Import workflows via HTTP API
        run: |
          echo "üöÄ Importing workflows from workflows.ndjson"
          
          # Check if workflows.ndjson exists
          if [ ! -f workflows.ndjson ]; then
            echo "‚ùå workflows.ndjson file not found"
            exit 1
          fi
          
          # Detect format and process accordingly
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üìÑ Detected JSON array format - converting to individual workflows"
            
            # Extract each workflow from the array
            workflow_count=$(cat workflows.ndjson | jq '. | length')
            echo "Found $workflow_count workflows in array"
            
            for i in $(seq 0 $((workflow_count - 1))); do
              # Show what fields exist in the original workflow
              echo "üîç Original workflow [$((i + 1))] fields:"
              cat workflows.ndjson | jq ".[$i] | keys" 
              
              # Try the most minimal approach - only essential fields
              clean_workflow=$(cat workflows.ndjson | jq ".[$i] | {
                name: .name,
                nodes: .nodes,
                connections: .connections
              }")
              
              name=$(echo "$clean_workflow" | jq -r '.name // "unnamed"')
              echo "üëâ [$((i + 1))/$workflow_count] Importing: $name"
              
              # Show what we're sending
              echo "üîç Cleaned workflow structure:"
              echo "$clean_workflow" | jq 'keys'
              echo "üîç First 300 chars of cleaned workflow:"
              echo "$clean_workflow" | head -c 300
              echo "..."
              
              # Import the workflow
              response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                -H "Content-Type: application/json" \
                -H "X-N8N-API-KEY: $N8N_API_KEY" \
                -H "ngrok-skip-browser-warning: true" \
                -X POST "$N8N_API_URL/api/v1/workflows" \
                -d @-)
              
              # Extract HTTP status code from response
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | head -n -1)
              
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                echo "   ‚úÖ Imported successfully (HTTP $http_code)"
              else
                echo "   ‚ùå Import failed (HTTP $http_code)"
                echo "   Response: $response_body"
              fi
            done
          else
            echo "üìÑ Processing as NDJSON format"
            
            # Count total workflows
            total_workflows=$(wc -l < workflows.ndjson)
            echo "Found $total_workflows workflows to import"
            
            # Process each workflow
            line_num=0
            while IFS= read -r workflow_json; do
              line_num=$((line_num + 1))
              
              # Skip empty lines
              if [ -z "$workflow_json" ]; then
                continue
              fi
              
              # Validate JSON and extract name
              if ! echo "$workflow_json" | jq . > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Line $line_num: Invalid JSON, skipping"
                continue
              fi
              
              # Clean the workflow - remove fields that cause API errors
              clean_workflow=$(echo "$workflow_json" | jq '{
                name: .name,
                nodes: .nodes,
                connections: .connections,
                active: (.active // false),
                settings: (.settings // {}),
                staticData: (.staticData // {}),
                tags: (.tags // []),
                triggerCount: (.triggerCount // 0),
                versionId: (.versionId // null)
              }')
              
              name=$(echo "$clean_workflow" | jq -r '.name // "unnamed"')
              echo "üëâ [$line_num/$total_workflows] Importing: $name"
              
              # Import the workflow
              response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                -H "Content-Type: application/json" \
                -H "X-N8N-API-KEY: $N8N_API_KEY" \
                -H "ngrok-skip-browser-warning: true" \
                -X POST "$N8N_API_URL/api/v1/workflows" \
                -d @-)
              
              # Extract HTTP status code from response
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | head -n -1)
              
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                echo "   ‚úÖ Imported successfully (HTTP $http_code)"
              else
                echo "   ‚ùå Import failed (HTTP $http_code)"
                echo "   Response: $response_body"
              fi
            done < workflows.ndjson
          fi
      - name: Verify import via HTTP API
        run: |
          response=$(curl -s \
            -H "Accept: application/json" \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            "$N8N_API_URL/api/v1/workflows")
          count=$(echo "$response" | jq '.data | length')
          echo "üìÑ Total workflows in n8n: $count"
