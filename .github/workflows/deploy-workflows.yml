name: Deploy n8n Workflows
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  import:
    runs-on: ubuntu-latest
    env:
      N8N_API_URL: https://e49b-85-53-80-220.ngrok-free.app
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install n8n CLI v1.84.3
        run: npm install -g n8n@1.84.3
      - name: Health-check n8n API
        run: |
          status=$(curl -s \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            -o /dev/null -w "%{http_code}" \
            "$N8N_API_URL/api/v1/workflows")
          if [ "$status" -ne 200 ]; then
            echo "‚ùå n8n API unhealthy (HTTP $status)" >&2
            exit 1
          fi
          echo "‚úÖ n8n API healthy (HTTP $status)"
      
      - name: Debug workflows.ndjson file
        run: |
          echo "üîç Debugging workflows.ndjson file structure:"
          
          # Show file info
          echo "File size: $(wc -c < workflows.ndjson) bytes"
          echo "Lines: $(wc -l < workflows.ndjson)"
          
          # Show first 200 characters of the file
          echo ""
          echo "First 200 characters:"
          head -c 200 workflows.ndjson
          echo ""
          echo ""
          
          # Check if it's a single JSON array or NDJSON format
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üîç File starts with '[' - appears to be a JSON array"
            echo "First workflow keys:"
            cat workflows.ndjson | jq '.[0] | keys' 2>/dev/null || echo "Failed to parse as array"
          else
            echo "üîç File doesn't start with '[' - checking NDJSON format"
            echo "First line structure:"
            head -n 1 workflows.ndjson | jq 'keys' 2>/dev/null || echo "Failed to parse first line as JSON object"
          fi

      - name: Test API with minimal workflow
        run: |
          echo "üß™ Testing API with minimal workflow to understand accepted settings format"
          
          # Create a minimal test workflow
          test_workflow='{
            "name": "API_Test_Workflow_DELETE_ME",
            "nodes": [
              {
                "parameters": {},
                "id": "test-node-1",
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [240, 300]
              }
            ],
            "connections": {},
            "settings": {}
          }'
          
          echo "üì§ Creating test workflow..."
          response=$(echo "$test_workflow" | curl -s -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            -X POST "$N8N_API_URL/api/v1/workflows" \
            -d @-)
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
            workflow_id=$(echo "$response_body" | jq -r '.data.id // .id')
            echo "‚úÖ Test workflow created successfully (ID: $workflow_id)"
            
            # Get the created workflow to see what settings structure is returned
            echo "üì• Fetching created workflow to see API format..."
            api_workflow=$(curl -s \
              -H "X-N8N-API-KEY: $N8N_API_KEY" \
              -H "ngrok-skip-browser-warning: true" \
              "$N8N_API_URL/api/v1/workflows/$workflow_id")
            
            echo "üîç API returned workflow settings structure:"
            echo "$api_workflow" | jq '.data.settings // .settings // "No settings found"'
            
            # Clean up test workflow
            echo "üßπ Cleaning up test workflow..."
            curl -s \
              -H "X-N8N-API-KEY: $N8N_API_KEY" \
              -H "ngrok-skip-browser-warning: true" \
              -X DELETE "$N8N_API_URL/api/v1/workflows/$workflow_id" > /dev/null
            echo "‚úÖ Test workflow deleted"
          else
            echo "‚ùå Test workflow creation failed (HTTP $http_code)"
            echo "Response: $response_body"
          fi

      - name: Import workflows with enhanced debugging
        run: |
          echo "üöÄ Importing workflows from workflows.ndjson with enhanced debugging"
          
          # Check if workflows.ndjson exists
          if [ ! -f workflows.ndjson ]; then
            echo "‚ùå workflows.ndjson file not found"
            exit 1
          fi
          
          # Detect format and process accordingly
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üìÑ Detected JSON array format - converting to individual workflows"
            
            # Extract each workflow from the array
            workflow_count=$(cat workflows.ndjson | jq '. | length')
            echo "Found $workflow_count workflows in array"
            
            for i in $(seq 0 $((workflow_count - 1))); do
              echo ""
              echo "üîÑ Processing workflow [$((i + 1))/$workflow_count]"
              
              # Get workflow name first
              name=$(cat workflows.ndjson | jq -r ".[$i].name // \"unnamed_$i\"")
              echo "üëâ Workflow: $name"
              
              # Show original settings for debugging
              echo "üîç Original settings structure:"
              original_settings=$(cat workflows.ndjson | jq ".[$i].settings // {}")
              echo "$original_settings" | jq .
              
              # Try different cleaning strategies
              echo "üß™ Testing different settings cleaning approaches..."
              
              # Strategy 1: Only proven working settings (minimal)
              minimal_settings=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder
              } | with_entries(select(.value != null and .value != ""))')
              
              # Strategy 2: Core settings with more fields
              core_settings=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder,
                saveManualExecutions: .saveManualExecutions,
                callerPolicy: .callerPolicy,
                errorWorkflow: .errorWorkflow,
                timezone: .timezone
              } | with_entries(select(.value != null and .value != ""))')
              
              # Strategy 3: Remove ALL known problematic fields
              filtered_settings=$(echo "$original_settings" | jq 'del(
                .saveDataErrorExecution, 
                .saveDataSuccessExecution, 
                .saveExecutionProgress, 
                .executionTimeout,
                .saveExecutionOnError,
                .saveExecutionOnSuccess,
                .saveDataManualExecutions,
                .callerIds,
                .executionTimeout
              )')
              
              # Strategy 4: Empty settings
              empty_settings="{}"
              
              # Try each strategy
              strategies=("minimal" "core" "filtered" "empty")
              settings_variants=("$minimal_settings" "$core_settings" "$filtered_settings" "$empty_settings")
              
              success=false
              for strategy_idx in 0 1 2 3; do
                strategy_name=${strategies[$strategy_idx]}
                settings_to_use=${settings_variants[$strategy_idx]}
                
                echo "   üß™ Trying strategy: $strategy_name"
                echo "   Settings: $settings_to_use"
                
                # Create clean workflow with current settings strategy
                clean_workflow=$(cat workflows.ndjson | jq ".[$i] | {
                  name: .name,
                  nodes: .nodes,
                  connections: .connections,
                  settings: ($settings_to_use)
                }" --argjson settings_to_use "$settings_to_use")
                
                # Import the workflow
                response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                  -H "Content-Type: application/json" \
                  -H "X-N8N-API-KEY: $N8N_API_KEY" \
                  -H "ngrok-skip-browser-warning: true" \
                  -X POST "$N8N_API_URL/api/v1/workflows" \
                  -d @-)
                
                # Extract HTTP status code from response
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)
                
                if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                  echo "   ‚úÖ Import successful with $strategy_name strategy (HTTP $http_code)"
                  success=true
                  break
                else
                  echo "   ‚ùå Strategy $strategy_name failed (HTTP $http_code)"
                  echo "   Response: $response_body"
                fi
              done
              
              if [ "$success" = false ]; then
                echo "   üí• All strategies failed for workflow: $name"
                echo "   üîç Full workflow structure causing issues:"
                cat workflows.ndjson | jq ".[$i]" | head -50
              fi
            done
            
          else
            echo "üìÑ Processing as NDJSON format"
            
            # Count total workflows
            total_workflows=$(wc -l < workflows.ndjson)
            echo "Found $total_workflows workflows to import"
            
            # Process each workflow
            line_num=0
            while IFS= read -r workflow_json; do
              line_num=$((line_num + 1))
              
              # Skip empty lines
              if [ -z "$workflow_json" ]; then
                continue
              fi
              
              # Validate JSON and extract name
              if ! echo "$workflow_json" | jq . > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Line $line_num: Invalid JSON, skipping"
                continue
              fi
              
              echo ""
              echo "üîÑ Processing workflow [$line_num/$total_workflows]"
              
              name=$(echo "$workflow_json" | jq -r '.name // "unnamed"')
              echo "üëâ Workflow: $name"
              
              # Show original settings for debugging
              echo "üîç Original settings structure:"
              original_settings=$(echo "$workflow_json" | jq '.settings // {}')
              echo "$original_settings" | jq .
              
              # Try different cleaning strategies (same as above)
              minimal_settings=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder
              } | with_entries(select(.value != null and .value != ""))')
              
              core_settings=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder,
                saveManualExecutions: .saveManualExecutions,
                callerPolicy: .callerPolicy,
                errorWorkflow: .errorWorkflow,
                timezone: .timezone
              } | with_entries(select(.value != null and .value != ""))')
              
              filtered_settings=$(echo "$original_settings" | jq 'del(
                .saveDataErrorExecution, 
                .saveDataSuccessExecution, 
                .saveExecutionProgress, 
                .executionTimeout,
                .saveExecutionOnError,
                .saveExecutionOnSuccess,
                .saveDataManualExecutions,
                .callerIds,
                .executionTimeout
              )')
              
              empty_settings="{}"
              
              strategies=("minimal" "core" "filtered" "empty")
              settings_variants=("$minimal_settings" "$core_settings" "$filtered_settings" "$empty_settings")
              
              success=false
              for strategy_idx in 0 1 2 3; do
                strategy_name=${strategies[$strategy_idx]}
                settings_to_use=${settings_variants[$strategy_idx]}
                
                echo "   üß™ Trying strategy: $strategy_name"
                echo "   Settings: $settings_to_use"
                
                clean_workflow=$(echo "$workflow_json" | jq '{
                  name: .name,
                  nodes: .nodes,
                  connections: .connections,
                  settings: ($settings_to_use)
                }' --argjson settings_to_use "$settings_to_use")
                
                response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                  -H "Content-Type: application/json" \
                  -H "X-N8N-API-KEY: $N8N_API_KEY" \
                  -H "ngrok-skip-browser-warning: true" \
                  -X POST "$N8N_API_URL/api/v1/workflows" \
                  -d @-)
                
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)
                
                if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                  echo "   ‚úÖ Import successful with $strategy_name strategy (HTTP $http_code)"
                  success=true
                  break
                else
                  echo "   ‚ùå Strategy $strategy_name failed (HTTP $http_code)"
                  echo "   Response: $response_body"
                fi
              done
              
              if [ "$success" = false ]; then
                echo "   üí• All strategies failed for workflow: $name"
              fi
              
            done < workflows.ndjson
          fi

      - name: Handle folder organization (tags)
        run: |
          echo "üìÅ Checking and organizing workflows into folders using tags..."
          
          # Get all workflows
          workflows_response=$(curl -s \
            -H "Accept: application/json" \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            "$N8N_API_URL/api/v1/workflows")
          
          echo "üîç Current workflows in n8n:"
          echo "$workflows_response" | jq '.data[] | {id: .id, name: .name, tags: .tags}'
          
          # Check if we have folder information in the original export
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üìÇ Checking for folder/tag information in original workflows..."
            
            workflow_count=$(cat workflows.ndjson | jq '. | length')
            for i in $(seq 0 $((workflow_count - 1))); do
              name=$(cat workflows.ndjson | jq -r ".[$i].name")
              tags=$(cat workflows.ndjson | jq -r ".[$i].tags // [] | @json")
              meta=$(cat workflows.ndjson | jq -r ".[$i].meta // {} | @json")
              
              if [ "$tags" != "[]" ] || [ "$meta" != "{}" ]; then
                echo "   $name - Tags: $tags, Meta: $meta"
              fi
            done
          fi
          
          echo "üí° To organize workflows into folders, you'll need to:"
          echo "   1. Create tags in n8n UI or via API"
          echo "   2. Update workflows with appropriate tag assignments"
          echo "   3. Or modify the import process to include tag information"

      - name: Verify import via HTTP API
        run: |
          response=$(curl -s \
            -H "Accept: application/json" \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            "$N8N_API_URL/api/v1/workflows")
          count=$(echo "$response" | jq '.data | length')
          echo "üìÑ Total workflows in n8n: $count"
          
          echo ""
          echo "üìã Imported workflows summary:"
          echo "$response" | jq -r '.data[] | "   ‚úÖ \(.name) (ID: \(.id))"'
