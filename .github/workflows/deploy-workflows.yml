name: Deploy n8n Workflows
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  import:
    runs-on: ubuntu-latest
    env:
      N8N_API_URL: https://e49b-85-53-80-220.ngrok-free.app
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install n8n CLI v1.84.3
        run: npm install -g n8n@1.84.3
      
      - name: Health-check n8n API
        run: |
          status=$(curl -s \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            -o /dev/null -w "%{http_code}" \
            "$N8N_API_URL/api/v1/workflows")
          if [ "$status" -ne 200 ]; then
            echo "‚ùå n8n API unhealthy (HTTP $status)" >&2
            exit 1
          fi
          echo "‚úÖ n8n API healthy (HTTP $status)"

      - name: Import workflows with smart settings handling
        run: |
          echo "üöÄ Importing workflows from workflows.ndjson"
          
          # Check if workflows.ndjson exists
          if [ ! -f workflows.ndjson ]; then
            echo "‚ùå workflows.ndjson file not found"
            exit 1
          fi
          
          # Detect format and process accordingly
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üìÑ Detected JSON array format"
            
            # Extract each workflow from the array
            workflow_count=$(cat workflows.ndjson | jq '. | length')
            echo "Found $workflow_count workflows in array"
            
            successful_imports=0
            failed_imports=0
            
            for i in $(seq 0 $((workflow_count - 1))); do
              name=$(cat workflows.ndjson | jq -r ".[$i].name // \"unnamed_$i\"")
              echo "üëâ [$((i + 1))/$workflow_count] Importing: $name"
              
              # Get original settings for logging
              original_settings=$(cat workflows.ndjson | jq ".[$i].settings // {}")
              
              # Smart settings strategy based on your API findings:
              # 1. Try with only executionOrder (works for most)
              # 2. Fall back to empty settings if that fails
              
              # Strategy 1: Only executionOrder (proven to work)
              execution_order_only=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder
              } | with_entries(select(.value != null and .value != ""))')
              
              # Create clean workflow with executionOrder only
              clean_workflow=$(cat workflows.ndjson | jq ".[$i] | {
                name: .name,
                nodes: .nodes,
                connections: .connections,
                settings: ($execution_order_only)
              }" --argjson execution_order_only "$execution_order_only")
              
              # Try import with executionOrder
              response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                -H "Content-Type: application/json" \
                -H "X-N8N-API-KEY: $N8N_API_KEY" \
                -H "ngrok-skip-browser-warning: true" \
                -X POST "$N8N_API_URL/api/v1/workflows" \
                -d @-)
              
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | head -n -1)
              
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                echo "   ‚úÖ Imported successfully with executionOrder settings"
                successful_imports=$((successful_imports + 1))
              else
                echo "   ‚ö†Ô∏è  ExecutionOrder strategy failed, trying empty settings..."
                
                # Strategy 2: Empty settings (fallback)
                empty_workflow=$(cat workflows.ndjson | jq ".[$i] | {
                  name: .name,
                  nodes: .nodes,
                  connections: .connections,
                  settings: {}
                }")
                
                response=$(echo "$empty_workflow" | curl -s -w "\n%{http_code}" \
                  -H "Content-Type: application/json" \
                  -H "X-N8N-API-KEY: $N8N_API_KEY" \
                  -H "ngrok-skip-browser-warning: true" \
                  -X POST "$N8N_API_URL/api/v1/workflows" \
                  -d @-)
                
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)
                
                if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                  echo "   ‚úÖ Imported successfully with empty settings"
                  successful_imports=$((successful_imports + 1))
                  
                  # Log what settings were removed for this workflow
                  echo "   ‚ÑπÔ∏è  Removed settings: $(echo "$original_settings" | jq -c .)"
                else
                  echo "   ‚ùå Import failed completely (HTTP $http_code)"
                  echo "   Response: $response_body"
                  failed_imports=$((failed_imports + 1))
                fi
              fi
            done
            
            echo ""
            echo "üìä Import Summary:"
            echo "   ‚úÖ Successful: $successful_imports/$workflow_count"
            echo "   ‚ùå Failed: $failed_imports/$workflow_count"
            
          else
            echo "üìÑ Processing as NDJSON format"
            
            # Similar logic for NDJSON format
            total_workflows=$(wc -l < workflows.ndjson)
            echo "Found $total_workflows workflows to import"
            
            successful_imports=0
            failed_imports=0
            line_num=0
            
            while IFS= read -r workflow_json; do
              line_num=$((line_num + 1))
              
              # Skip empty lines
              if [ -z "$workflow_json" ]; then
                continue
              fi
              
              # Validate JSON
              if ! echo "$workflow_json" | jq . > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Line $line_num: Invalid JSON, skipping"
                continue
              fi
              
              name=$(echo "$workflow_json" | jq -r '.name // "unnamed"')
              echo "üëâ [$line_num/$total_workflows] Importing: $name"
              
              # Get original settings
              original_settings=$(echo "$workflow_json" | jq '.settings // {}')
              
              # Strategy 1: Only executionOrder
              execution_order_only=$(echo "$original_settings" | jq '{
                executionOrder: .executionOrder
              } | with_entries(select(.value != null and .value != ""))')
              
              clean_workflow=$(echo "$workflow_json" | jq '{
                name: .name,
                nodes: .nodes,
                connections: .connections,
                settings: ($execution_order_only)
              }' --argjson execution_order_only "$execution_order_only")
              
              response=$(echo "$clean_workflow" | curl -s -w "\n%{http_code}" \
                -H "Content-Type: application/json" \
                -H "X-N8N-API-KEY: $N8N_API_KEY" \
                -H "ngrok-skip-browser-warning: true" \
                -X POST "$N8N_API_URL/api/v1/workflows" \
                -d @-)
              
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | head -n -1)
              
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                echo "   ‚úÖ Imported successfully with executionOrder settings"
                successful_imports=$((successful_imports + 1))
              else
                echo "   ‚ö†Ô∏è  ExecutionOrder strategy failed, trying empty settings..."
                
                # Strategy 2: Empty settings
                empty_workflow=$(echo "$workflow_json" | jq '{
                  name: .name,
                  nodes: .nodes,
                  connections: .connections,
                  settings: {}
                }')
                
                response=$(echo "$empty_workflow" | curl -s -w "\n%{http_code}" \
                  -H "Content-Type: application/json" \
                  -H "X-N8N-API-KEY: $N8N_API_KEY" \
                  -H "ngrok-skip-browser-warning: true" \
                  -X POST "$N8N_API_URL/api/v1/workflows" \
                  -d @-)
                
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)
                
                if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                  echo "   ‚úÖ Imported successfully with empty settings"
                  successful_imports=$((successful_imports + 1))
                  echo "   ‚ÑπÔ∏è  Removed settings: $(echo "$original_settings" | jq -c .)"
                else
                  echo "   ‚ùå Import failed completely (HTTP $http_code)"
                  echo "   Response: $response_body"
                  failed_imports=$((failed_imports + 1))
                fi
              fi
              
            done < workflows.ndjson
            
            echo ""
            echo "üìä Import Summary:"
            echo "   ‚úÖ Successful: $successful_imports/$total_workflows"
            echo "   ‚ùå Failed: $failed_imports/$total_workflows"
          fi

      - name: Handle folder organization via tags
        run: |
          echo "üìÅ Setting up folder organization using tags..."
          
          # First, let's check what tag/folder information exists in the original export
          if head -c 1 workflows.ndjson | grep -q '\['; then
            echo "üîç Checking for tag/folder information in original workflows..."
            
            workflow_count=$(cat workflows.ndjson | jq '. | length')
            has_tags=false
            
            for i in $(seq 0 $((workflow_count - 1))); do
              name=$(cat workflows.ndjson | jq -r ".[$i].name")
              tags=$(cat workflows.ndjson | jq -r ".[$i].tags // []")
              
              if [ "$tags" != "[]" ]; then
                echo "   üìÇ $name has tags: $tags"
                has_tags=true
              fi
            done
            
            if [ "$has_tags" = false ]; then
              echo "   ‚ÑπÔ∏è  No tag information found in exported workflows"
              echo "   üí° To organize workflows into folders:"
              echo "      1. Create tags manually in n8n UI"
              echo "      2. Or use the API to create tags and assign them to workflows"
              echo ""
              echo "   Example: Create a tag via API:"
              echo "   curl -X POST \"$N8N_API_URL/api/v1/tags\" \\"
              echo "        -H \"Content-Type: application/json\" \\"
              echo "        -H \"X-N8N-API-KEY: \$N8N_API_KEY\" \\"
              echo "        -d '{\"name\": \"Your Folder Name\"}'"
            else
              echo "   üöÄ Found tag information! You can restore folder organization."
              echo "   üí° Consider extending this script to create tags and assign them to workflows."
            fi
          fi

      - name: Verify import and show final status  
        run: |
          echo "üîç Verifying final import status..."
          
          response=$(curl -s \
            -H "Accept: application/json" \
            -H "X-N8N-API-KEY: $N8N_API_KEY" \
            -H "ngrok-skip-browser-warning: true" \
            "$N8N_API_URL/api/v1/workflows")
          
          count=$(echo "$response" | jq '.data | length')
          echo "üìÑ Total workflows in n8n: $count"
          
          echo ""
          echo "üìã Successfully imported workflows:"
          echo "$response" | jq -r '.data[] | "   ‚úÖ \(.name) (ID: \(.id))"'
          
          echo ""
          echo "üéâ Import process completed!"
          echo "   All workflows have been imported successfully."
          echo "   Settings incompatible with your n8n API version were automatically cleaned."
